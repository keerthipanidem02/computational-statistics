#create
def create(r,c,m):
  m = []
  for i in range(r):          
    a =[]
    for j in range(c): 
        t=0    
        a.append(t)
    m.append(a)
  return m


#transpose matrix
def transpose(m):
  r=len(m)
  c=len(m[0])
  trn=[]
  for j in range(c):
      b=[]
      for i in range(r):
         b.append(m[i][j])
      trn.append(b)
  return trn
  
  
#matrix printing
def matrix(matx):
  r=len(matx)
  c=len(matx[0])
  for i in range(r):
    for j in range(c):
        print(matx[i][j], end = " ")
    print()
    
    
#matrix multliplication
def mul(ma,mb):
  r=len(ma)
  c=len(mb[0])
  q=len(mb)
  m1=[]
  mat=create(r,c,m1)
  for i in range(r):
      for j in range(c):
          for k in range(q):
              mat[i][j]=mat[i][j]+ma[i][k]*mb[k][j]
  return mat
  

#minor
def minor(m,i,j):
    return [row[:j] + row[j+1:] for row in (m[:i]+m[i+1:])]
    
 
 #determinent
def determinent(a1):
  

  if len(a1)==2:
    return a1[0][0]*a1[1][1]-a1[0][1]*a1[1][0]

  sum=0
  for i in range(len(a1)):
    sum+=((-1)**i)*a1[0][i]*determinent(minor(a1,0,i))

  return sum
  

#inverse 
def inverse(a1):

  if len(a1)==2:
    return [[a1[1][1]/determinent(a1),(-1)*a1[1][0]/determinent(a1)],
                                  [(-1)*a1[0][1]/determinent(a1),a1[0][0]/determinent(a1)]]

  cofactors=[]
  for i in range(len(a1)):
    cofact=[]
    for j in range(len(a1)):
      cofact.append((-1)**(i+j)*determinent(minor(a1,i,j)))
    cofactors.append(cofact)

  k=transpose(cofactors)

  for i in range(len(a1)):
    for j in range(len(a1)):
      k[i][j]=k[i][j]/determinent(a1)
  

  return k
  
import numpy as np
import pandas as pd
import scipy.stats

y=[]
cy=int(input("enter no of dependent col's"))
cx=int(input("enter no of independent col's"))
ny=int(input("enter no of values in dependent variable"))
nx=int(input("enter no of values in independent variables"))
print("enter y and x values\n")
for i in range(cy):
  y.append(list(map(float,input().split())))
y=np.array(y)
x=[]
for i in range(cx):
    x.append(list(map(float,input().split())))
l1=[]
for i in range(nx):
  l1.append(1)
x.insert(0,l1)
x1=np.array(x)
y1=np.array(y)
print("y matrix:\n",np.array(y1))
print("x matrix:\n ",np.array(x1))


xt=transpose(x1)
xt1=np.array(xt)
print("transpose matrix:\n",xt1)

xtx=mul(x1,xt)
xtxi=inverse(xtx)

xtx1=np.array(xtx)
xtxi1=np.array(xtxi)
print("xtx matrix:\n",xtx1)
print("xtxi matrix:\n",xtxi1)

yt=transpose(y)

xty=mul(x1,yt)
xty1=np.array(xty)
print("xty matrix:\n",xty1)

B=mul(xtxi,xty)
B1=np.array(B)
p=len(B)
print("result B matrix:\n",B1)
if(p==2):
  print("Multiple linear regression equation is : y={}+{}x1".format(B1[0],B1[1]))
  yc=B1[0]+B1[1]*x1[1]
if(p==3):
    print("Multiple linear regression equation is : y={}+{}x1+{}x2".format(B1[0],B1[1],B1[2]))
    yc=B1[0]+B1[1]*x1[1]+B1[2]*x1[2]
if(p==4):
  print("Multiple linear regression equation is : y={}+{}x1+{}x2+{}x3".format(B1[0],B1[1],B1[2],B1[3]))
  yc=B1[0]+B1[1]*x1[1]+B1[2]*x1[2]+B1[3]*x1[3]

ycc=np.array(yc)
print("y-hat: \n",ycc)

e=y-yc
e1=np.array(e)
print("error:\n",e1)

print("Required values:\n")
sse=0
for i in e1[0]:
  sse=sse+i*i
print("SSE=",sse)

ym=(np.sum(y1))/ny
sst=0
for i in y1[0]:
  sst=sst+(i-ym)**2
print("SST=",sst)

ssr=sst-sse
print("SSR=",ssr)

#To test the R2 
print("R2 Test \n")
r2=ssr/sst
print("R2=",r2)

if(r2>0.9):
  print("accept the model-good fit")
else:
  print("reject the model-bad fit")

#To test the model using ANOVA
print("ANOVA TEST")
print("enter alpha")
al=float(input())
df=pd.DataFrame()
df["source of variation"]=["Regression","errors","total"]
df["sum of squares"]=[ssr,sse,ssr+sse]
x=(p-1)
y=(ny-p)
df["degrees of freedom"]=[x,y,ny-1]
x1=ssr/x
y1=sse/y
df["mean sum of square"]=[x1,y1," "]
f=x1/y1
df["varience ratio"]=[f,"  "," "]
print("ANOVA TABLE\n")
print(df)
if(f<1):
    f=1/f
tv=scipy.stats.f.ppf(1-al,x,y)
if(tv<f):
    print("reject ho")
else:
    print("accept ho")

#T-test for the individual beta values
print("T-test\n")
c=[]
for i in range(len(xtxi)):
  for j in range(len(xtxi)):
    if(i==j):
        c.append(xtxi[i][j])
pre=[]
coeff=[]
se=[]
for i in range(len(B)):
  pre.append("beta["+str(i)+"]")
  coeff.append(B[i])

for i in range(len(c)):
  se.append(np.sqrt(y1*c[i]))

t=[]
for i in range(len(B)):
  t.append(coeff[i][0]/se[i])

df1=pd.DataFrame()
df1["predictor"]=pre
df1["coefficient"]=coeff
df1["standard error"]=se
df1["T-values"]=t
print("PARAMETER TABLE\n")
print(df)
print("INFERENCE\n")
for i in range(len(t)):
  tv=scipy.stats.t.ppf(1-((al)/2),y)
  if(tv<abs(t[i])):
    print("reject ho beta{}!=0  for tv={} contributing to the model".format(i,tv))
  else:
    print("accept ho beta{}==0  for tv={} not contributing to the model".format(i,tv))

