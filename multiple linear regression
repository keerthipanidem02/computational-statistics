#create
def create(r,c,m):
  m = []
  for i in range(r):          
    a =[]
    for j in range(c): 
        t=0    
        a.append(t)
    m.append(a)
  return m


#transpose matrix
def transpose(m):
  r=len(m)
  c=len(m[0])
  trn=[]
  for j in range(c):
      b=[]
      for i in range(r):
         b.append(m[i][j])
      trn.append(b)
  return trn
  
  
#matrix printing
def matrix(matx):
  r=len(matx)
  c=len(matx[0])
  for i in range(r):
    for j in range(c):
        print(matx[i][j], end = " ")
    print()
    
    
#matrix multliplication
def mul(ma,mb):
  r=len(ma)
  c=len(mb[0])
  q=len(mb)
  m1=[]
  mat=create(r,c,m1)
  for i in range(r):
      for j in range(c):
          for k in range(q):
              mat[i][j]=mat[i][j]+ma[i][k]*mb[k][j]
  return mat
  

#minor
def minor(m,i,j):
    return [row[:j] + row[j+1:] for row in (m[:i]+m[i+1:])]
    
 
 #determinent
def determinent(a1):
  

  if len(a1)==2:
    return a1[0][0]*a1[1][1]-a1[0][1]*a1[1][0]

  sum=0
  for i in range(len(a1)):
    sum+=((-1)**i)*a1[0][i]*determinent(minor(a1,0,i))

  return sum
  

#inverse 
def inverse(a1):

  if len(a1)==2:
    return [[a1[1][1]/determinent(a1),(-1)*a1[1][0]/determinent(a1)],
                                  [(-1)*a1[0][1]/determinent(a1),a1[0][0]/determinent(a1)]]

  cofactors=[]
  for i in range(len(a1)):
    cofact=[]
    for j in range(len(a1)):
      cofact.append((-1)**(i+j)*determinent(minor(a1,i,j)))
    cofactors.append(cofact)

  k=transpose(cofactors)

  for i in range(len(a1)):
    for j in range(len(a1)):
      k[i][j]=k[i][j]/determinent(a1)
  

  return k
  
import numpy as np
y=[]

cy=int(input("enter no of y col's"))
cx=int(input("enter no of x col's"))
ny=int(input("enter no of values in y"))
nx=int(input("enter no of values in x"))

for i in range(cy):
  y.append(list(map(int,input().split())))
y=np.array(y)
x=[]
for i in range(cx):
    x.append(list(map(int,input().split())))
l1=[]
for i in range(nx):
  l1.append(1)
x.insert(0,l1)
x1=np.array(x)
y1=np.array(y)
print("y matrix:\n",np.array(y1))
print("\n x matrix:\n ",np.array(x1))


xt=transpose(x1)
xt1=np.array(xt)
print("\n transpose matrix:\n",xt1)

xtx=mul(x1,xt)
xtxi=inverse(xtx)

xtx1=np.array(xtx)
xtxi1=np.array(xtxi)
print("\n xtx matrix:\n",xtx1)
print("\n xtxi matrix:\n",xtxi1)

yt=transpose(y)

xty=mul(x1,yt)
xty1=np.array(xty)
print("\n xty matrix:\n",xty1)

B=mul(xtxi,xty)
B1=np.array(B)
print("\n result B matrix:\n",B1)

print("equation is : y={}+{}x1+{}x2".format(B1[0],B1[1],B1[2]))

yc=B1[0]+B1[1]*x1[1]+B1[2]*x1[2]
ycc=np.array(yc)
print("\n ycap \n",ycc)

e=y-yc
e1=np.array(e)
print("\nerror\n",e1)

sse=0
for i in e1[0]:
  sse=sse+i*i
print("SSE:",sse)

ym=(np.sum(y1))/ny
sst=0
for i in y1[0]:
  sst=sst+(i-ym)**2
print("SST:",sst)

ssr=sst-sse
print("SSE:",sse)

r2=ssr/sst
print("R2:",r2)

if(r2>0.9):
  print("accept the model-good fit")
else:
  print("reject the model-bad fit")



output:


enter no of y col's1
enter no of x col's2
enter no of values in y7
enter no of values in x7
11 11 8 2 5 5 4
-5 -4 -1 2 2 3 3
5 4 1 -3 -2 -2 -3
y matrix:
 [[11 11  8  2  5  5  4]]

 x matrix:
  [[ 1  1  1  1  1  1  1]
 [-5 -4 -1  2  2  3  3]
 [ 5  4  1 -3 -2 -2 -3]]

 transpose matrix:
 [[ 1 -5  5]
 [ 1 -4  4]
 [ 1 -1  1]
 [ 1  2 -3]
 [ 1  2 -2]
 [ 1  3 -2]
 [ 1  3 -3]]

 xtx matrix:
 [[  7   0   0]
 [  0  68 -67]
 [  0 -67  68]]

 xtxi matrix:
 [[0.14285714 0.         0.        ]
 [0.         0.5037037  0.4962963 ]
 [0.         0.4962963  0.5037037 ]]

 xty matrix:
 [[ 46]
 [-66]
 [ 69]]

 result B matrix:
 [[6.57142857]
 [1.        ]
 [2.        ]]
equation is : y=[6.57142857]+[1.]x1+[2.]x2

 ycap 
 [11.57142857 10.57142857  7.57142857  2.57142857  4.57142857  5.57142857
  3.57142857]

error
 [[-0.57142857  0.42857143  0.42857143 -0.57142857  0.42857143 -0.57142857
   0.42857143]]
SSE: 1.7142857142857144
SST: 73.71428571428571
SSE: 1.7142857142857144
R2: 0.9767441860465117
accept the model-good fit
