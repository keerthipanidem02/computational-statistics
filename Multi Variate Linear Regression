#Multi variate Linear Regression
import numpy as np
'''
q=int(input('Enter no. of dependent variables:'))
yt=[]
for i in range(q):
  print('Enter y'+str(i+1),'data')
  yt.append([float(j) for j in input().split()])

n=len(yt[0])
p=int(input('Enter no. of independent variables:'))
xt=[]
xt.append([1]*n)
for i in range(p):
  print('Enter x'+str(i+1),'data')
  xt.append([float(j) for j in input().split()])

p=p+1
g=float(input('Enter level of  significance: '))
'''
q=2
p=3
yt=[[10, 12, 11, 9 ,9 ,10, 11, 12, 11, 10, 11, 12],[100, 110, 105 ,94, 95, 99, 104, 108 ,105 ,98 ,103, 110]]
xt=[[9,  8, 7, 14, 12, 10, 7, 4 ,6 ,5 ,7, 6],[62, 58, 64, 60, 63, 57, 55, 56, 59, 61 ,57 ,60],[1.0 ,1.3, 1.2, 0.8, 0.8, 0.9, 1.0, 1.2, 1.1, 1.0, 1.2, 1.2]]
g=0.05

#transpose matrix
def transpose(m):
  r=len(m)
  c=len(m[0])
  trn=[]
  for j in range(c):
      b=[]
      for i in range(r):
         b.append(m[i][j])
      trn.append(b)
  return trn

def getMinor(m,i,j):
  return [p[:j]+p[j+1:] for p in m[:i]+m[i+1:]]

def getDeterminant(a):
  if len(a)==1:
    return a[0][0]
  if len(a)==2:
    return a[0][0]*a[1][1]-a[0][1]*a[1][0]
  det=0
  for c in range(len(a)):
    det+=(-1)**c*a[0][c]*getDeterminant(getMinor(a,0,c))
  return det

def coFactor(m):
  return [[(-1)**(i+j)*getDeterminant(getMinor(m,i,j))for j in range(len(m))] for i in range(len(m))]

def Inverse(m):
  det=getDeterminant(m)
  if det==0: print('det=0,Inverse not posssible');exit()
  adj=transpose(coFactor(m))
  return [[adj[i][j]/det for j in range(len(adj[0]))] for i in range(len(adj))]

def Multiply(a,b):
    r1,c1,r2,c2=len(a),len(a[0]),len(b),len(b[0])
    if c1!=r2: print('Multiplication not possible');exit()
    mm=[]
    for i in range(0,r1):
        c=[]
        for j in range(0,c2):
            p=0
            for k in range(0,c1):
                p=p+(a[i][k]*b[k][j])
            c.append(p)
        mm.append(c)
    return mm

x=transpose(xt)
y=transpose(yt)
xtxi=Inverse(Multiply(xt,x))
xty=Multiply(xt,y)
b=Multiply(xtxi,xty)
yt=np.array(yt)
xt=np.array(xt)

for i in range(q):
  print('\nEQUATION y{}'.format(i+1))
  ye='y'+str(i+1)+' = '
  ye=ye+str('%.3f'%b[0][i])+' + '
  y1=np.array(b[0][i]*xt[0])
  f=0
  for j in range(1,p):
      ye=ye+str('(%.3f)'%b[j][i])+'x'+str(j);y1=y1+(b[j][i]*xt[j])
      if j!=p-1:ye=ye+' + '

  print('Model fit equation is ',ye)
  sse=np.sum((yt[i]-y1)**2)
  sst=np.sum((yt[i]-np.mean(yt[i]))**2)
  ssr=sst-sse
  print('\nUsing Coefficient of Determination Method: ')
  r2=ssr/sst
  print('R^2 = %.5f'%(r2))
  if(r2>0.90):print('Model fits good (R^2>0.90)')
  else:print('Model does not fit good (R^2<=0.90)')
  print('\nUSing ANOVA Test:')
  mssr=ssr/(p-1)
  msse=sse/(n-p)
  f=mssr/msse
  import scipy.stats as s
  if f>=1: ft=s.f.ppf(1-g,p-1,n-p)
  else: f=1/f;ft=s.f.ppf(1-g,n-p,p-1)
  print('Calculated value of f is %.5f'%(f))
  print('Table value of f is %.5f'%(ft))
  if f>ft: print('Model fits good')
  else: print('Model does not fit good')

  print('\nTest of Individual Parameters:')
  cjj=[xtxi[j][j] for j in range(len(xtxi))]
  tt=s.t.ppf(1-g/2,n-p)
  print('Table value of t is %.5f'%(tt))
  for j in range(p):
      e=np.sqrt(msse*cjj[j])
      t=b[j][i]/e
      q='b['+str(j)+']'
      print('t(cal) for',q,'is %.5f'%(t))
      if abs(t)>tt: print(q,'is contributing to the model')
      else: print(q,'is not contributing to the model')
      
      
      output:
      
      
      EQUATION y1
Model fit equation is  y1 = 0.016 + (0.052)x1 + (7.004)x2

Using Coefficient of Determination Method: 
R^2 = 0.75277
Model does not fit good (R^2<=0.90)

USing ANOVA Test:
Calculated value of f is 13.70138
Table value of f is 4.25649
Model fits good

Test of Individual Parameters:
Table value of t is 2.26216
t(cal) for b[0] is 0.17762
b[0] is not contributing to the model
t(cal) for b[1] is 1.56078
b[1] is not contributing to the model
t(cal) for b[2] is 5.17916
b[2] is contributing to the model

EQUATION y2
Model fit equation is  y2 = 0.444 + (0.877)x1 + (44.292)x2

Using Coefficient of Determination Method: 
R^2 = 0.39954
Model does not fit good (R^2<=0.90)

USing ANOVA Test:
Calculated value of f is 2.99422
Table value of f is 4.25649
Model does not fit good

Test of Individual Parameters:
Table value of t is 2.26216
t(cal) for b[0] is 0.63252
b[0] is not contributing to the model
t(cal) for b[1] is 3.30717
b[1] is contributing to the model
t(cal) for b[2] is 4.14949
b[2] is contributing to the model
